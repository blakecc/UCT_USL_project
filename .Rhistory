}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
# setwd("E:\\DataScienceData\\SL_Assignment")
setwd("/Users/blakecuningham/Dropbox (Personal)/MScDataScience/Unsupervised Learning/Assignment")
leuk <- read.table("leukemia_array.txt")
leuk <- t(leuk)
leuk <- data.frame(leuk)
#PCA
train_pca_model <- prcomp(leuk)
plot(train_pca_model$x[1])
plot(train_pca_model$x[,1])
leuk_pca <- train_pca_model$x
leuk_pca <- data.frame(train_pca_model$x)
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, colour = label)) +
scale_color_discrete(name = "Label")+
labs(title = "First two principal components of data") +
theme_light()
View(leuk_pca)
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, colour = index)) +
scale_color_discrete(name = "Label")+
labs(title = "First two principal components of data") +
theme_light()
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2)) +
labs(title = "First two principal components of data") +
theme_light()
View(leuk)
leuk.class[1:8] = "test"
row.names(leuk)
leuk.class <- row.names(leuk)
leuk$class
leuk$class <- row.names(leuk)
rm(leuk.class)
leuk$class
strsplit(leuk$class, "_")
strsplit(leuk$class, "_")[2]
unlist(strsplit(leuk$class, "_"))
strsplit(leuk$class, "_")
lapply(leuk$class, strsplit("_")[2])
lapply(leuk$class, strsplit("_"))
lapply(leuk$class, strsplit(,"_"))
lapply(leuk$class, strsplit(x ,"_"))
sapply(leuk$class, strsplit(x ,"_"))
sapply(leuk$class, strsplit("_"))
array(strsplit(leuk$class, "_"))
list(strsplit(leuk$class, "_"))
strsplit(leuk$class, "_")
strsplit(leuk$class, "_")[[2]]
leuk$class <- sapply(strsplit(as.character(leuk$class),'_'), "[", 2)
leuk$class
leuk <- leuk[,c(ncol(leuk),1:(ncol(leuk)-1))]
train_pca_model <- prcomp(leuk[,-1])
leuk_pca <- cbind(leuk$class, data.frame(train_pca_model$x))
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, colour = "class")) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
View(leuk_pca)
train_pca_model <- prcomp(leuk[,-1])
leuk_pca <- cbind("class" = leuk$class, data.frame(train_pca_model$x))
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, colour = "class")) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, color = "class")) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
preprocessParams <- preProcess(leuk[,-1], method=c("range"))
leuk[,-1] <- preprocessParams
preprocessParams$ranges
leuk[,-1] <- predict(preprocessParams, leuk[,-1])
summary(leuk[,-1])
summary(leuk[,c(2,3,4,5,6,7)])
leuk <- read.table("leukemia_array.txt")
leuk <- t(leuk)
leuk <- data.frame(leuk)
leuk$class <- row.names(leuk)
leuk$class <- sapply(strsplit(as.character(leuk$class),'_'), "[", 2)
leuk <- leuk[,c(ncol(leuk),1:(ncol(leuk)-1))]
summary(leuk[,c(2,3,4,5,6,7)])
summary(leuk[,c(8,9,10,11,12,13,14)])
m <- matrix(rnorm(9), ncol=3)
summarym
m
apply(m, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
## Data to make a minimal reproducible example
m <- matrix(rnorm(9), ncol=3)
## Rescale each column to range between 0 and 1
apply(m, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
## Data to make a minimal reproducible example
m <- matrix(rnorm(9), ncol=3)
m
## Rescale each column to range between 0 and 1
apply(m, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
apply(m, MARGIN = 2, FUN = function(X) log(X))
m <- matrix(rnorm(9) + 2, ncol=3)
m
apply(m, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
apply(m, MARGIN = 2, FUN = function(X) log(X))
apply(m, MARGIN = 2, FUN = function(X) (X - mean(X) / sd(X)))
m <- matrix(rnorm(9) + 2, ncol=3)
m
apply(m, MARGIN = 2, FUN = function(X) (X - mean(X) / sd(X)))
apply(m, MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))
apply(m, MARGIN = 2, FUN = function(X) (log(X) - mean(log(X))) / sd(log(X)))
m <- matrix(rnorm(27) + 2, ncol=3)
apply(m, MARGIN = 2, FUN = function(X) (log(X) - mean(log(X))) / sd(log(X)))
m <- matrix(rnorm(27) + 2, ncol=3)
apply(m, MARGIN = 2, FUN = function(X) (log(X) - mean(log(X))) / sd(log(X)))
apply(m, MARGIN = 2, FUN = function(X) log(X))
apply(m, MARGIN = 2, FUN = function(X) (log(X) - mean(log(X))) / sd(log(X)))
apply(m, MARGIN = 2, FUN = function(X) log(X))
apply(m, MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))
apply(m, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
apply(m, MARGIN = 2, FUN = function(X) mean(X))
apply(m, MARGIN = 2, FUN = function(X) log(X))
mean(m)
?diff
diff(m)
m
range(m)
diff(range(m))
(m - min(m)) / diff(range(m))
leuk_scaled_cols_range01 <- cbind(class = leuk$class, apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
summary(leuk_scaled_cols_range01[,c(8,9,10,11,12,13,14)])
leuk_scaled_cols_range01 <- cbind("class" = leuk$class, apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
leuk_scaled_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))))
summary(leuk_scaled_cols_range01[,c(8,9,10,11,12,13,14)])
leuk_scaled_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(m, MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))))
leuk_scaled_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))))
summary(leuk_scaled_cols_centeredscaled[,c(8,9,10,11,12,13,14)])
leuk_tranformed_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))))
leuk_transformed_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))))
leuk_transformed_log <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) log(X))))
summary(leuk_transformed_log[,c(8,9,10,11,12,13,14)])
leuk_tranformed_full_range01 <- cbind("class" = leuk$class, data.frame((leuk[,-1] - min(leuk[,-1])) / diff(range(leuk[,-1]))))
summary(leuk_tranformed_full_range01[,c(8,9,10,11,12,13,14)])
leuk_tranformed_log_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (log(X) - min(log(X)))/diff(range(log(X))))))
summary(leuk_tranformed_log_cols_range01[,c(8,9,10,11,12,13,14)])
leuk_transformed_log_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (log(X) - mean(log(X))) / sd(log(X)))))
summary(leuk_transformed_log_cols_centeredscaled[,c(8,9,10,11,12,13,14)])
View(leuk_scaled_cols_centeredscaled)
leuk_pca_model <- prcomp(leuk_scaled_cols_range01[,-1])
leuk_pca <- cbind("class" = leuk$class, data.frame(leuk_pca_model$x))
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
#PCA
leuk_pca_model <- prcomp(leuk_scaled_cols_centeredscaled[,-1])
leuk_pca <- cbind("class" = leuk$class, data.frame(leuk_pca_model$x))
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
leuk_pca_model$sdev
sum(leuk_pca_model$sdev)
sum(leuk_pca_model$sdev^2)
plot(leuk_pca_model$sdev^2)
ncol(leuk)
plot(leuk_pca_model$sdev^2 / ncol(leuk))
leuk_pca_model$rotation
varImp(leuk_pca_model)
leuk_pca_model$center
leuk_pca_model$rotation
apply(leuk_pca_model$rotation, 1, sum)
apply(leuk_pca_model$rotation, 1, sd)
sort(apply(leuk_pca_model$rotation, 1, sd))
?sort
sort(apply(leuk_pca_model$rotation, 1, sd), decreasing = T)
sort(apply(leuk_pca_model$rotation, 1, sd), decreasing = T)[1:100]
leuk_pca_model$rotation
leuk_squared_loadings <- leuk_pca_model$rotation ^ 2
leuk_squared_loadings <- data.frame(leuk_pca_model$rotation ^ 2)
apply(leuk_squared_loadings, 1, sum)
sum(apply(leuk_squared_loadings, 1, sum))
sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:100]
sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:5]
sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:10]
sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:8]
sort(apply(leuk_pca_model$rotation, 1, sd), decreasing = T)[1:8]
length(sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:100])
sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:100]
data.frame(sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:100])
row.names(data.frame(sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:100]))
leuk_squared_loadings <- data.frame(leuk_pca_model$rotation ^ 2)
top100 <- row.names(data.frame(sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:100]))
rm(m)
colnames(leuk)
leuk[,c(top100)]
leuk_top100only <- leuk[,c("class",top100)]
View(leuk_top100only)
leuk_pca_model <- prcomp(leuk_tranformed_log_cols_range01[,-1])
leuk_pca <- cbind("class" = leuk$class, data.frame(leuk_pca_model$x))
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
leuk_top100_tranformed_log_cols_range01 <- cbind("class" = leuk_top100only$class, data.frame(apply(leuk_top100only[,-1], MARGIN = 2, FUN = function(X) (log(X) - min(log(X)))/diff(range(log(X))))))
leuk_pca_model_top100 <- prcomp(leuk_top100_tranformed_log_cols_range01[,-1])
leuk_pca_top100 <- cbind("class" = leuk_top100only$class, data.frame(leuk_pca_model_top100$x))
ggplot()+
geom_point(data = leuk_pca_top100, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
leuk_2 <- read.table("leukemia_array.txt")
boxplot(leuk_tranformed_log_cols_range01[1:8])
boxplot(leuk_tranformed_log_cols_range01[2:8])
boxplot(leuk_tranformed_log_cols_range01[2:12])
boxplot(leuk[2:12])
boxplot(leuk_tranformed_cols_range01[2:12])
boxplot(leuk_tranformed_full_range01[2:12])
boxplot(leuk_transformed_cols_centeredscaled[2:12])
leuk_pca_model <- prcomp(leuk_transformed_cols_centeredscaled[,-1])
leuk_pca <- cbind("class" = leuk$class, data.frame(leuk_pca_model$x))
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
dist.leuk <- daisy(leuk_transformed_cols_centeredscaled[,-1])
list.of.packages <- c(
"MASS",
"caret",
"ggplot2",
"reshape2",
"cluster"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)>=1){
for (i in 1:length(new.packages)){
install.packages(new.packages[i])
}
}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
dist.leuk <- daisy(leuk_transformed_cols_centeredscaled[,-1])
hc.leuk <- hclust(dist.leuk, method = "complete")
plot(hc.leuk)
?hclust
hc.leuk <- hclust(dist.leuk, method = "centroid")
plot(hc.leuk)
hc.leuk <- hclust(dist.leuk, method = "median")
plot(hc.leuk)
hc.leuk <- hclust(dist.leuk, method = "single")
plot(hc.leuk)
hc.leuk <- hclust(dist.leuk, method = "complete")
plot(hc.leuk)
leuk_top100_transformed_cols_centeredscaled <- cbind("class" = leuk_top100only$class, data.frame(apply(leuk_top100only[,-1], MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))))
dist.leuk_top100 <- daisy(leuk_top100_transformed_cols_centeredscaled[,-1])
hc.leuk_top100 <- hclust(dist.leuk_top100, method = "complete")
plot(hc.leuk_top100)
hc.leuk_top100 <- hclust(dist.leuk_top100, method = "single")
plot(hc.leuk_top100)
hc.leuk_top100 <- hclust(dist.leuk_top100, method = "complete")
plot(hc.leuk_top100)
?kmeans
km.leuk <- kmeans(leuk_transformed_cols_centeredscaled[,-1])
km.leuk <- kmeans(leuk_transformed_cols_centeredscaled[,-1], 2)
km.leuk$centers
km.leuk$cluster
table(km.leuk$cluster, leuk_transformed_cols_centeredscaled$class)
cutree(hc.leuk, 2)
cutree(hc.leuk_top100, 2)
cutree(hc.leuk, 2)
table(km.leuk$cluster, leuk_transformed_cols_centeredscaled$class)
?kmeans
km.leuk <- kmeans(leuk[,-1], 2)
table(km.leuk$cluster, leuk$class)
km.leuk <- kmeans(leuk_transformed_log[,-1], 2)
table(km.leuk$cluster, leuk$class)
table(km.leuk$cluster, leuk_transformed_log$class)
km.leuk <- kmeans(leuk_transformed_log_cols_centeredscaled[,-1], 2)
table(km.leuk$cluster, leuk$class)
km.leuk <- kmeans(leuk_transformed_cols_centeredscaled[,-1], 2)
table(km.leuk$cluster, leuk$class)
#Tranformation: range between 0 and 1
leuk_tranformed_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))))
#Tranformation: range between 0 and 1 for range of full matrix
leuk_tranformed_full_range01 <- cbind("class" = leuk$class, data.frame((leuk[,-1] - min(leuk[,-1])) / diff(range(leuk[,-1]))))
#Tranformation: center and divide by sd
leuk_transformed_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))))
#Tranformation: log transform
leuk_transformed_log <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) log(X))))
#Tranformation: range between 0 and 1 of log tranform
leuk_tranformed_log_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (log(X) - min(log(X)))/diff(range(log(X))))))
#Tranformation: center and divide by sd of log transform
leuk_transformed_log_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (log(X) - mean(log(X))) / sd(log(X)))))
rm(list = ls())
list.of.packages <- c(
"MASS",
"caret",
"ggplot2",
"reshape2",
"cluster"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)>=1){
for (i in 1:length(new.packages)){
install.packages(new.packages[i])
}
}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
# setwd("E:\\DataScienceData\\SL_Assignment")
setwd("/Users/blakecuningham/Dropbox (Personal)/MScDataScience/Unsupervised Learning/Assignment")
leuk <- read.table("leukemia_array.txt")
leuk <- t(leuk)
leuk <- data.frame(leuk)
leuk$class <- row.names(leuk)
leuk$class <- sapply(strsplit(as.character(leuk$class),'_'), "[", 2)
leuk <- leuk[,c(ncol(leuk),1:(ncol(leuk)-1))]
#Tranformation: range between 0 and 1
leuk_transformed_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))))
#Tranformation: range between 0 and 1 for range of full matrix
leuk_transformed_full_range01 <- cbind("class" = leuk$class, data.frame((leuk[,-1] - min(leuk[,-1])) / diff(range(leuk[,-1]))))
#Tranformation: center and divide by sd
leuk_transformed_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))))
#Tranformation: log transform
leuk_transformed_log <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) log(X))))
#Tranformation: range between 0 and 1 of log tranform
leuk_tranformed_log_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (log(X) - min(log(X)))/diff(range(log(X))))))
#Tranformation: center and divide by sd of log transform
leuk_transformed_log_cols_centeredscaled <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (log(X) - mean(log(X))) / sd(log(X)))))
#PCA
leuk_pca_model <- prcomp(leuk_transformed_cols_centeredscaled[,-1])
leuk_pca <- cbind("class" = leuk$class, data.frame(leuk_pca_model$x))
ggplot()+
geom_point(data = leuk_pca, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
plot(leuk_pca_model$sdev^2 / ncol(leuk))
leuk_squared_loadings <- data.frame(leuk_pca_model$rotation ^ 2)
top100_genes <- row.names(data.frame(sort(apply(leuk_squared_loadings, 1, sum), decreasing = T)[1:100]))
leuk_top100only <- leuk[,c("class", top100)]
leuk_top100only <- leuk[,c("class", top100_genes)]
leuk_top100_tranformed_log_cols_range01 <- cbind("class" = leuk_top100only$class, data.frame(apply(leuk_top100only[,-1], MARGIN = 2, FUN = function(X) (log(X) - min(log(X)))/diff(range(log(X))))))
leuk_top100_transformed_cols_centeredscaled <- cbind("class" = leuk_top100only$class, data.frame(apply(leuk_top100only[,-1], MARGIN = 2, FUN = function(X) (X - mean(X)) / sd(X))))
#PCA
leuk_pca_model_top100 <- prcomp(leuk_top100_tranformed_log_cols_range01[,-1])
leuk_pca_top100 <- cbind("class" = leuk_top100only$class, data.frame(leuk_pca_model_top100$x))
ggplot()+
geom_point(data = leuk_pca_top100, aes(x = PC1, y = PC2, color = class)) +
scale_color_discrete(name = "Class")+
labs(title = "First two principal components of data") +
theme_light()
plot(leuk_pca_model$sdev^2 / ncol(leuk))
# leuk_2 <- read.table("leukemia_array.txt")
# boxplot(leuk_tranformed_log_cols_range01[2:12])
# boxplot(leuk_transformed_cols_centeredscaled[2:12])
dist.leuk <- daisy(leuk_transformed_cols_centeredscaled[,-1])
hc.leuk <- hclust(dist.leuk, method = "complete")
plot(hc.leuk)
dist.leuk_top100 <- daisy(leuk_top100_transformed_cols_centeredscaled[,-1])
hc.leuk_top100 <- hclust(dist.leuk_top100, method = "complete")
plot(hc.leuk_top100)
cutree(hc.leuk, 2)
km.leuk <- kmeans(leuk_transformed_cols_range01[,-1], 2)
table(km.leuk$cluster, leuk$class)
km.leuk <- kmeans(leuk_transformed_full_range01[,-1], 2)
table(km.leuk$cluster, leuk$class)
km.leuk <- kmeans(leuk_transformed_log_cols_centeredscaled[,-1], 2)
table(km.leuk$cluster, leuk$class)
rm(leuk_tranformed_log_cols_range01)
leuk_transformed_log_cols_range01 <- cbind("class" = leuk$class, data.frame(apply(leuk[,-1], MARGIN = 2, FUN = function(X) (log(X) - min(log(X)))/diff(range(log(X))))))
km.leuk <- kmeans(leuk_transformed_log_cols_range01[,-1], 2)
table(km.leuk$cluster, leuk$class)
km.leuk <- kmeans(leuk_top100_tranformed_log_cols_range01[,-1], 2)
table(km.leuk$cluster, leuk_top100only$class)
cut.hc.leuk <- cutree(hc.leuk, 2)
cut.hc.leuk
table(cut.hc.leuk, leuk$class)
# leuk_2 <- read.table("leukemia_array.txt")
# boxplot(leuk_tranformed_log_cols_range01[2:12])
# boxplot(leuk_transformed_cols_centeredscaled[2:12])
dist.leuk_top100 <- daisy(leuk_top100_tranformed_log_cols_range01[,-1])
hc.leuk_top100 <- hclust(dist.leuk_top100, method = "complete")
plot(hc.leuk_top100)
cut.hc.leuk_top100 <- cutree(hc.leuk, 2)
table(cut.hc.leuk_top100, leuk$class)
list.of.packages <- c(
"MASS",
"caret",
"ggplot2",
"reshape2",
"cluster",
"xlsx"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)>=1){
for (i in 1:length(new.packages)){
install.packages(new.packages[i])
}
}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
tu_cars <- read.xlsx("myfile.xlsx")
tu_cars <- read.xlsx("myfile.xlsx", sheetIndex = 1)
tu_cars <- read.xlsx("TRANSUNION_LIST_V5.xlsx", sheetIndex = 1)
list.of.packages <- c(
"MASS",
"caret",
"ggplot2",
"reshape2",
"cluster",
"xlsx",
"data.table"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)>=1){
for (i in 1:length(new.packages)){
install.packages(new.packages[i])
}
}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
tu_cars <- fread("TRANSUNION_LIST_V5.xlsx")
getwd()
tu_cars <- read.xlsx("TRANSUNION_LIST_V5.xlsx", sheetIndex = 1)
tu_cars <- read.xlsx2("TRANSUNION_LIST_V5.xlsx", sheetIndex = 1)
list.of.packages <- c(
"MASS",
"caret",
"ggplot2",
"reshape2",
"cluster",
"xlsx",
"data.table",
"XLConnect"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)>=1){
for (i in 1:length(new.packages)){
install.packages(new.packages[i])
}
}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
tu_cars <- readWorksheetFromFile("TRANSUNION_LIST_V5.xlsx", sheet = 1)
list.of.packages <- c(
"MASS",
"caret",
"ggplot2",
"reshape2",
"cluster",
"xlsx",
"data.table",
"XLConnect",
"openxlsx"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)>=1){
for (i in 1:length(new.packages)){
install.packages(new.packages[i])
}
}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
list.of.packages <- c(
"MASS",
"caret",
"ggplot2",
"reshape2",
"cluster",
# "xlsx",
"data.table",
# "XLConnect",
"openxlsx"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)>=1){
for (i in 1:length(new.packages)){
install.packages(new.packages[i])
}
}
for (i in 1:length(list.of.packages)){
suppressWarnings(library(list.of.packages[i], character.only = T))
}
rm(list = c("i","list.of.packages", "new.packages"))
tu_cars <- read.xlsx("TRANSUNION_LIST_V5.xlsx", sheet = 1)
View(tu_cars)
